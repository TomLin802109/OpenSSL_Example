%module encryption
%include "std_string.i"
%include "std_vector.i"
%include "exception.i"
%define USE_SWIG
%enddef

%exception; //Deletes any previously defined handler
/// mapping std exception to target language
/// it apply to all function after
%exception{
try{
	$action
}
catch(const std::out_of_range & e) {
	SWIG_exception(SWIG_IndexError, e.what());
}
catch(const std::invalid_argument & e) {
	SWIG_exception(SWIG_ValueError, e.what());
}
catch(const std::exception & e) {
	SWIG_exception(SWIG_RuntimeError, e.what());
}
catch(...) {
	SWIG_exception(SWIG_RuntimeError, "unknow exception from qr-cpp");
}
}
%template(ByteData) std::vector<unsigned char>;
//%typemap(imtype, inattributes = "[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8Marshaler))]", outattributes = "[return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8Marshaler))]") string "string"
%{
#include <Encryptor.hpp>
%}
%include "Encryptor.hpp"
